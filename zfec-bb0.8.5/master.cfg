# -*- python -*-
# -*- coding: utf-8 -*-
# ex: set syntax=python:

import os, sys
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from buildbot.process import factory
from buildbot.steps.shell import Compile, Test
from buildbot.steps.source import Darcs
from buildbot.steps.python import PyFlakes

from bbsupport import CreateEgg, InstallToEgg, TestFromEgg, InstallToPrefixDir, TestFromPrefixDir, UploadEgg, UploadDeb, UpdateAptRepo, UploadEggToPyPI, UploadSdistToPyPI, Stdeb, ToolVersions, GenCoverage, ArchiveCoverage, UploadCoverage, UnarchiveCoverage

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
def bs(name, pw, missing_timeout=36000):
    return BuildSlave(name, pw,
                      notify_on_missing=["noc-org-buildslaves@tahoe-lafs.org"],
                      missing_timeout=missing_timeout,
                      )

import secrets

c['slaves'] = [
    bs(slavename, password) for slavename, password in secrets.slaves.iteritems()
    ]

c['slavePortnum'] = 12987

####### CHANGESOURCES

from buildbot.changes import pb
c['change_source'] = pb.PBChangeSource()

####### BUILDERS


#BASE_URL = "https://tahoe-lafs.org/source/zfec/"
BASE_URL = "http://tahoe-lafs.org:6998/source/zfec/"
BRANCH = "trunk"


def make_factory(build_egg=True, upload_egg=False, upload_egg_to_pypi=False, upload_sdist_to_pypi=False, build_deb=False, upload_deb=False, baseURL=BASE_URL, flakes=False, test_from_prefixdir=True, test_from_egg=True, do_coverage=False, TAR='tar'):
    f = factory.BuildFactory()
    f.addStep(Darcs(mode="clobber", baseURL=baseURL, defaultBranch='trunk'))
    f.addStep(ToolVersions())
    f.addStep(Compile(command=["python", "setup.py", "build"], workdir="build/zfec", timeout=36000))
    if flakes:
        f.addStep(PyFlakes(command=["python", "setup.py", "flakes"], workdir="build/zfec", warnOnWarnings=True, flunkOnFailure=True))
    if do_coverage:
        f.addStep(GenCoverage(workdir="build/zfec", flunkOnFailure=True, haltOnFailure=True))
        f.addStep(ArchiveCoverage(workdir="build/zfec", TAR=TAR))
        f.addStep(UploadCoverage(workdir="build/zfec", upload_furlfile='../../../upload-coverage.furl'))
        f.addStep(UnarchiveCoverage(workdir="build/zfec", unarch_furlfile='../../../unarchive-coverage.furl'))
    else:
        f.addStep(Test(command=["python", "setup.py", "test"], workdir="build/zfec", flunkOnFailure=True, haltOnFailure=True))
    f.addStep(InstallToPrefixDir(workdir="build/zfec", prefixinstalldir="prefixinstalldir"))
    if test_from_prefixdir:
        f.addStep(TestFromPrefixDir(workdir="build", srcbasedir="zfec", prefixinstalldir="prefixinstalldir"))
    if build_egg:
        f.addStep(CreateEgg(workdir="build/zfec"))
        f.addStep(InstallToEgg(workdir="build/zfec", egginstalldir="egginstalldir"))
        if test_from_egg:
            f.addStep(TestFromEgg(workdir="build", srcbasedir="zfec", egginstalldir="egginstalldir"))
    if upload_egg:
        f.addStep(UploadEgg(workdir="build/zfec", upload_furlfile="../../../upload-egg.furl", egg_filename_base="dist/zfec"))
    if upload_egg_to_pypi:
        f.addStep(UploadEggToPyPI(workdir="build/zfec")) # requires a password for zooko's pypi account
    if upload_sdist_to_pypi:
        f.addStep(UploadSdistToPyPI(workdir="build/zfec")) # requires a password for zooko's pypi account
    if build_deb:
        f.addStep(Stdeb(workdir="build/zfec", warnOnWarnings=False))
    if upload_deb:
        f.addStep(UploadDeb(workdir="build/zfec", upload_furlfile="../../../main-deb.furl", deb_filename_base="deb_dist/python-zfec"))
        f.addStep(UpdateAptRepo(workdir="build/zfec", update_furlfile="../../../tahoe-update-apt.furl"))
    return f

from buildbot.config import BuilderConfig

c['builders'] = bs = []

bs.append(BuilderConfig(name="FreeStorm windows-mingw32-py26",
                        slavenames=["freestorm-winxp"],
                        factory=make_factory(upload_egg=True),
                        ))

#bs.append(BuilderConfig(name="FreeStorm Win7-amd64-mingw py2.6",
#                        slavenames=["freestorm-win7-64-mingw"],
#                        factory=make_factory(upload_egg=True),
#                        ))

bs.append(BuilderConfig(name="FreeStorm CentOS5-i386",
                        slavenames=["freestorm-centos5-i386"],
                        factory=make_factory(upload_egg=True,
                                             test_from_prefixdir=False,
                                             test_from_egg=False),
                        ))

bs.append(BuilderConfig(name="FreeStorm CentOS6-amd64",
                        slavenames=["freestorm-centos6-amd64"],
                        factory=make_factory(upload_egg=False,
                                             test_from_prefixdir=False,
                                             test_from_egg=False),
                        ))

bs.append(BuilderConfig(name="Dcoder Win7-64 py2.6",
                        slavenames=["boing-win64"],
                        factory=make_factory(
                            upload_egg=True,
                            test_from_egg=False,
                            test_from_prefixdir=False,
                            ),
                        ))

# bs.append(BuilderConfig(name="linux-amd64-ubuntu-karmic-yukyuk",
#                         slavenames=["yukyuk"],
#                         factory=make_factory(),
#                         ))

bs.append(BuilderConfig(name="Arthur debian-lenny-c7-i386",
                        slavenames=["arthur-lenny-c7-32bit"],
                        factory=make_factory(),
                        ))

# bs.append(BuilderConfig(name="mac-amd64-osx-10.4.11-ootles",
#                         slavenames=["mac-amd64-osx-10.4.11-ootles"],
#                         factory=make_factory(),
#                         ))

# bs.append(BuilderConfig(name="mac-i386-osx-10.5-faust",
#                         slavenames=["mac-i386-osx-10.5-faust"],
#                         factory=make_factory(),
#                         ))

bs.append(BuilderConfig(name="Neju osx-10.6 py2.6",
                        slavenames=["ashton.laval"],
                        factory=make_factory(upload_egg=True,
                                             test_from_prefixdir=False),
                        ))

bs.append(BuilderConfig(name="Zooko zomp Mac-amd64 10.6 py2.6",
                        slavenames=["zomp"],
                        factory=make_factory(do_coverage=False),
                        # code coverage tool temporarily broken :-(
                        ))

bs.append(BuilderConfig(name="buildbot.rubenkerkhof.com",
                        slavenames=["buildbot.rubenkerkhof.com"],
                        factory=make_factory(
                            build_deb=False,
                            do_coverage=False, # code coverage temporarily broken :-(
                            test_from_egg=False, # to avoid seeing redness due to setuptools/distutils bug
                            test_from_prefixdir=False, # to avoid seeing redness due to setuptools/distutils bug
                            ),
                        ))

bs.append(BuilderConfig(name="francois-ts109-armv5tel",
                        slavenames=["francois-ts109-armv5tel"],
                        factory=make_factory(build_egg=True,
                                             upload_egg=True),
                        ))

bs.append(BuilderConfig(name="opensolaris-amd64-osol_hoss",
                        slavenames=["osol_hoss"],
                        factory=make_factory(test_from_prefixdir=False),
                        ))

bs.append(BuilderConfig(name="Zooko-amd64-nexenta-nooxie",
                        slavenames=["solaris-amd64-nexenta-nooxie"],
                        factory=make_factory(),
                        ))

bs.append(BuilderConfig(name="Kyle OpenBSD-amd64",
                        slavenames=["starfish"],
                        factory=make_factory(
                            build_egg=True,
                            test_from_egg=False, # to avoid seeing redness due to setuptools/distutils bug
                            test_from_prefixdir=False, # to avoid seeing redness due to setuptools/distutils bug
                            do_coverage=False, # code coverage tool temporarily broken :-(
                            TAR='gtar',
                            ),
                        ))

bs.append(BuilderConfig(name="Randy FreeBSD-amd64",
                        slavenames=["freebsd.psg"],
                        factory=make_factory(build_egg=True, TAR='gtar'),
                        ))

bs.append(BuilderConfig(name="Ludo NixOS-amd64",
                        slavenames=["nixey"],
                        factory=make_factory(),
                        ))

bs.append(BuilderConfig(name="MM netbsd5 i386 warp",
                        slavenames=["warp"],
                        factory=make_factory(build_egg=True,
                                             upload_egg=True,
                                             TAR='gtar'),
                        ))

bs.append(BuilderConfig(name="atlas1 natty",
                        slavenames=["atlas1"],
                        factory=make_factory(build_egg=True,
                                             upload_egg=False,
                                             test_from_prefixdir=False),
                        ))

bs.append(BuilderConfig(name="Josh Ubuntu-amd64 laptop",
                        slavenames=["Ocypete"],
                        factory=make_factory(),
                        ))

bs.append(BuilderConfig(name="marcus cygwin",
                        slavenames=["wanners.net-winxp-cygwin"],
                        factory=make_factory(
                            build_egg=True,
                            test_from_egg=True,
                            upload_egg=False,
                            test_from_prefixdir=True,
                            ),
                        ))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter

c['schedulers'] = []

all_builder_names = [b.name for b in c['builders']]
change_filter = filter.ChangeFilter(branch='trunk')
s_full = SingleBranchScheduler(name="all",
                               change_filter=change_filter,
                               treeStableTimer=3,
                               builderNames=all_builder_names)
c['schedulers'].append(s_full)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail
from buildbot.status.web import authz

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port="tcp:8014", authz=authz_cfg))
c['status'].append(mail.MailNotifier(fromaddr="noc-buildbot@tahoe-lafs.org",
                                     builders=[]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "zfec"
c['titleURL'] = "https://tahoe-lafs.org/trac/zfec"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "https://tahoe-lafs.org/buildbot-zfec"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
